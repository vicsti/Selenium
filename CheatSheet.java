import java.net.URL;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Platform;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class CheatSheet {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Every object may not have a ID, class name, name, linktext, xmlPath or css
		//Alpha numeric ID may varry on refresh of the page
		//Confirm the link object with a "a" (anchor) tag in the Page source
		//Classes should not have spaces. Compound classes could not be accepted
		//Xpath can be defined in n number of ways for the same object
		//xpath and css can be generated by browser tools
		//Firepath depreciated on the latest firefox browser 
		//When xpath start with html, the xpath is not reliable, switch browser to get a valid xpath
		//there is no direct way to get css path in chrome, only you can get it from tool bar 
		//$x("") for xpath
		//$("") for css
		//Firepath and chropath are used to get xpath and css in firepath and chromepath
		//How to write our own xPath 
		//  //tagName[@attribute='value'] --> //*[@attribute='value'] (any tagName)
		//For css
		// tagName[attribute='value'] --> [attribute='value'] (any TagNamge)
		//tagName#id -- is one more syntax for Css
		//tagName.className -- is one more syntax for CSS
		//By.cssSelector("div[class=\"cb-col cb-col-100 cb-scrd-itms\"] div:nth-child(3)")  -- nth child in css
		
		//Regular expression
		// //tagName[contains(@attribute,'value')] -- //tagName[statrs-with(@attribute,'value')] -- xpath 
		//tagName[ends-with(@attribute,'value')]
		// tagName[atrribute*='value'] -- Css 
		
		//Xpath for parent child relationship
		//Define xpath for the parent and then traverse to the child with the help of tag names.
		//tagName[@attribute='value']/following-sibling::li[1]
		
		//Using xpath, we can traverse back to the parent if we have static child attributes
		// //tagName[@attribute='value']/parent::parentTag[1]
		
		//The only difference between xpath and css is, Xpath has commands to traverse both forward and backword
		//where as css has only forward traversing
		
		//How to identify elements with text
		// //*[text()='text']
		
		//CSS is 10 times faster than Xpath
		//Under the class can be indentified only in Xpath
		//CSS is light weight and syntax is simple
		
		//When an drop down tagName contains "static" it means the dropdown is a static drop down
		//To automate static drop down, we have "select" class
		// exmple Select sel = new Select(driver.findElement(By.xpath("//select[@name=\"ctl00$mainContent$DropDownListCurrency\"]")));
		
		//Dynamic drop down selection
		//driver.findElement(By.xpath("(//a[@value=\"IXA\"])")).click();
		//driver.findElement(By.xpath("(//a[@value=\"BLR\"])[2]")).click();
		
		//How to work with check boxes
		// isSelected()
		//if(!driver.findElement(By.xpath("//input[@id=\"ctl00_mainContent_chk_friendsandfamily\"]")).isSelected()) {
		//	driver.findElement(By.xpath("//input[@id=\"ctl00_mainContent_chk_friendsandfamily\"]")).click();
		//}
		
		//Handeling radio buttons
		//Check the RadioButton.java program
		
		//How to handle alerts popup in your tests
		//Alerts should only be used when, we are unable to spy on the popup.
		//driver.findElement(By.xpath("//input[@value=\"Confirmation Alert\"]")).click();
		//driver.switchTo().alert().accept();
		
		//Form methods and web validations
		//isDisplayed : this method will check if the object is visible on the screen and the xpath/css 
		//should be valid, else it throws error
		//to make sure isDisplayed does not throw error, you need to first check if the xpath/css 
		//is first valis by the below command
		//int count=driver.findElements(By.xpath("//input[@name=\"group1\"]")).size();
		
		//isEnabled : enabled or greyed out
		
		//getText()
		//System.out.println(driver.findElement(By.xpath("//li[@id=\"js-dt__tags_63\"]")).getText());
		
		//Synchronization in Selenium
		// - Implicit wait : the default wait time for every step in the test. This is globally
		//  driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		
		// - Explicit wait : specific wait time for a step in a test
		//WebDriverWait wait = new WebDriverWait(driver, 15);
		//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//a[contains(@href,\"Amsterdam\")]")));
		
		
		//In real time project, it is a combination of both that is ideal to use.
		// - Thread.sleep : hold the whole java script for 5 seconds
		// - Fluent wait
		
		//Actions Class
		//Actions class provides methods of all keyboard and mouse interactions.
		//How to right click in selenium
		//Actions act = new Actions(driver);
		//WebElement move = driver.findElement(By.xpath("//a[@id=\"nav-link-accountList\"]"));
		//act.moveToElement(move).build().perform();
		//act.moveToElement(move).click().sendKeys(Keys.SHIFT).sendKeys("hello").build().perform();
		//act.moveToElement(move).contextClick().build().perform();  //right click
		
		//Frames
		//driver.switchTo().frame(driver.findElement(By.cssSelector("iframe.demo-frame")));
		//driver.switchTo().frame(0);
		//Actions act = new Actions(driver);
		//act.dragAndDrop(driver.findElement(By.id("draggable")), driver.findElement(By.cssSelector("div#droppable.ui-widget-header.ui-droppable"))).build().perform();
		
		//Child Window handeling
		/*Set<String> ids = driver.getWindowHandles();
		Iterator<String> id = ids.iterator();
		String parentId = id.next();
		String childId = id.next();
		driver.switchTo().window(childId);
		System.out.println(driver.getTitle()); */
		
		//Scope the driver
		//find the number of links on the page
		//int hrefCount = driver.findElements(By.cssSelector("a[href*=\"http\"")).size();
		//System.out.println("The number1 of links are "+hrefCount);
		//hrefCount = driver.findElements(By.tagName("a")).size();
		//System.out.println("The number2 of links are "+hrefCount);
		//Limiting the scope of the driver to a specific part of the window.
		//WebElement footerDriver = driver.findElement(By.id("gf-BIG"));
		//hrefCount = footerDriver.findElements(By.tagName("a")).size();
		//System.out.println("The number3 of links are "+hrefCount);
		
		//What is the disadvantage with selenium
		//It cannot identify hidden text's -- In example AutoSuggest
		//class="ui-helper-hidden-accessible"
		//Solution is to use Java script to extract hidden script
		//document.getElementById(id)
		//Find an element by element id
		//document.getElementsByTagName(name)
		//Find elements by tag name
		//document.getElementsByClassName(name)
		//Find elements by class name
		
		//JavascriptExecutor js = (JavascriptExecutor)driver;
		//String script = "return document.getElementById(\"fromPlaceName\").value;";
		
		
		//SELENIUM GRID
		//1. Download the jar from https://www.seleniumhq.org/download/
		//2. Start the hub with the below command
		//C:\work>java -jar selenium-server-standalone-3.12.0.jar -role hub
		//Open Ie with the below hub url
		//http://192.168.1.6:4444/grid/console
		//3. Log into the machine to register it as a node to the hub
		//Download the same Grid jar to the nodes you want to register.
		//C:\work>java -Dwebdriver.chrome.driver="C:\chromedriver.exe"-jar selenium-server-standalone-3.12.0.jar -role webdriver -hub http://192.168.1.6:4444/grid/register/ -port 5566
		//Check if java is installed and configured on the node machine.
		
		//DesiredCapabilities dc = new DesiredCapabilities();
		//dc.setBrowserName("Chrome");
	    //dc.setPlatform(Platform.WINDOWS);
	    //WebDriver driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), dc);
		
		
		
		

	}

}
